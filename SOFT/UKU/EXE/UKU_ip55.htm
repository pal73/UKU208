<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\EXE\UKU_ip55.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\EXE\UKU_ip55.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 644]: Last Updated: Fri Nov 10 18:00:22 2017
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ind_hndl &rArr; event2ind &rArr; int2lcd &rArr; bcd2lcd_zero
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[21]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BOD_IRQHandler</a><BR>
 <LI><a href="#[31]">sys_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">sys_error</a><BR>
 <LI><a href="#[8e]">mem_test</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">mem_test</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from emac_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[2d]">main</a> from main.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ca]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>sys_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, net_config_http.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>

<P><STRONG><a name="[32]"></a>init_system</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_config_http.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcp
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[36]"></a>run_system</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, net_config_http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = run_system &rArr; run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
</UL>

<P><STRONG><a name="[39]"></a>process_hl_udp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config_http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_hl_udp &rArr; process_udp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[3b]"></a>process_hl_tcp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config_http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[3d]"></a>dispatch_frame</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, net_config_http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>

<P><STRONG><a name="[9e]"></a>igmp_is_member</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_config_http.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[71]"></a>mess_hndl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mess_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>mess_send</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[5e]"></a>mess_find</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[cb]"></a>mess_find_unvol</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mess.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>ret_ind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[cc]"></a>ret_ind_hndl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ret.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>ret_ind_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ret.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>ret_ind_sec_hndl</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ret.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>ret</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[3f]"></a>ret_hndl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>CalcChksum</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, at_lib.o(i.CalcChksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CalcChksum
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
</UL>

<P><STRONG><a name="[a5]"></a>CalcChksumVal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.CalcChksumVal))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[9d]"></a>SwapB</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_lib.o(i.SwapB))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
</UL>

<P><STRONG><a name="[d0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ae]"></a>poll_ethernet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_ethernet.o(i.poll_ethernet))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[af]"></a>process_hl_igmp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, at_ethernet.o(i.process_hl_igmp))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[5a]"></a>abs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[54]"></a>clr_scrn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
</UL>

<P><STRONG><a name="[47]"></a>find</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2lcdh
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip2lcd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;community2lcd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcd_mmm
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_m
</UL>

<P><STRONG><a name="[45]"></a>bin2bcd_int</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bin2bcd_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_m
</UL>

<P><STRONG><a name="[46]"></a>bcd2lcd_zero</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bcd2lcd_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_m
</UL>

<P><STRONG><a name="[44]"></a>int2lcd_m</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, common_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>

<P><STRONG><a name="[48]"></a>int2lcd_mm</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, common_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>

<P><STRONG><a name="[49]"></a>int2lcd_mmm</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = int2lcd_mmm
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[4a]"></a>long2lcd_mmm</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = long2lcd_mmm
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[5f]"></a>long2lcdyx_mmm</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = long2lcdyx_mmm
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[4b]"></a>int2lcdyx</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = int2lcdyx &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[4c]"></a>sub_bgnd</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sub_bgnd
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
</UL>

<P><STRONG><a name="[4d]"></a>int2lcd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
</UL>

<P><STRONG><a name="[4f]"></a>ptr_carry</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
</UL>

<P><STRONG><a name="[4e]"></a>event2ind</STRONG> (Thumb, 1674 bytes, Stack size 36 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = event2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[50]"></a>community2lcd</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = community2lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[51]"></a>ip2lcd</STRONG> (Thumb, 306 bytes, Stack size 52 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ip2lcd
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[60]"></a>long2lcdhyx</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = long2lcdhyx
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[52]"></a>char2lcdh</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, common_func.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>

<P><STRONG><a name="[d1]"></a>char2lcdhyx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, common_func.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>int2lcdhyx</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, common_func.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>char2lcdbyx</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, common_func.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>pointer_set</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pointer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[40]"></a>tree_down</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
</UL>

<P><STRONG><a name="[56]"></a>tree_up</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tree_up
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[53]"></a>bgnd_par</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bgnd_par
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_scrn
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[55]"></a>show_mess</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = show_mess &rArr; bgnd_par
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[58]"></a>event_data2ind</STRONG> (Thumb, 224 bytes, Stack size 28 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = event_data2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[64]"></a>gran_ring_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[5c]"></a>gran_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[65]"></a>gran</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[d4]"></a>gran_ring</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>gran_long</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gran.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>rtc_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>inv_search</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>abs_pal</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>init_ETH</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>def_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>def_ips_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[db]"></a>can_reset_hndl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>parol_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[6f]"></a>bitmap_hndl</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bitmap_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>ind_hndl</STRONG> (Thumb, 54508 bytes, Stack size 496 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ind_hndl &rArr; event2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcdhyx
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip2lcd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;community2lcd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcdyx_mmm
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcd_mmm
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>but_drv</STRONG> (Thumb, 294 bytes, Stack size 28 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>but_an</STRONG> (Thumb, 22416 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = but_an &rArr; show_mess &rArr; bgnd_par
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parol_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_ips_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_ring_char
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>watchdog_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>watchdog_reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>timer0_interrupt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = main &rArr; ind_hndl &rArr; event2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_tick
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_TcpNet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_hndl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[69]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 12 bytes, system_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>delayMs</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>enable_timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>disable_timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>reset_timer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>init_timer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[68]"></a>beep_drv</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[62]"></a>beep_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[72]"></a>beep_hndl</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = beep_hndl &rArr; mess_send
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>lcd1_chk</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>

<P><STRONG><a name="[78]"></a>lcd2_chk</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
</UL>

<P><STRONG><a name="[75]"></a>lcd1_wr</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_off
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[77]"></a>lcd2_wr</STRONG> (Thumb, 182 bytes, Stack size 4 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_off
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[79]"></a>data1_wr</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[7a]"></a>data2_wr</STRONG> (Thumb, 182 bytes, Stack size 4 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[7b]"></a>lcd_set_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_set_page &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[7c]"></a>lcd_set_col</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[7d]"></a>lcd_set_raw</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
</UL>

<P><STRONG><a name="[6a]"></a>lcd_init</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>status</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcd_agm1232_uku207_3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltstrobe
</UL>

<P><STRONG><a name="[e4]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_agm1232_uku207_3.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>ltstrobe</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lcd_agm1232_uku207_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;status
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_
</UL>

<P><STRONG><a name="[80]"></a>lcd_init_</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, lcd_agm1232_uku207_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ltstrobe
</UL>

<P><STRONG><a name="[6c]"></a>lcd_clear</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_clear &rArr; lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>lcd_on</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_on &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>lcd_off</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lcd_agm1232_uku207_3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>

<P><STRONG><a name="[70]"></a>lcd_out</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, lcd_agm1232_uku207_3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_out &rArr; lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>init_ethernet</STRONG> (Thumb, 496 bytes, Stack size 40 bytes, emac_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[8a]"></a>int_enable_eth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>

<P><STRONG><a name="[89]"></a>int_disable_eth</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>

<P><STRONG><a name="[96]"></a>send_frame</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
</UL>

<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ENET_IRQHandler &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>CalcChksumBuf</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, at_lib.o(i.CalcChksumBuf))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_udp
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[e7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[87]"></a>alloc_mem</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, at_mem.o(i.alloc_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>arp_cache_add</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
</UL>

<P><STRONG><a name="[91]"></a>arp_cache_find</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_alloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[93]"></a>arp_cache_update</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, at_arp.o(i.arp_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_cache_update &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[92]"></a>arp_send_req</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, at_arp.o(i.arp_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
</UL>

<P><STRONG><a name="[99]"></a>eth_chk_adr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ethernet.o(i.eth_chk_adr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eth_chk_adr &rArr; mem_comp
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
</UL>

<P><STRONG><a name="[3e]"></a>eth_send_frame</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, at_ethernet.o(i.eth_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_frame
</UL>

<P><STRONG><a name="[97]"></a>free_mem</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, at_mem.o(i.free_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_in_queue
</UL>

<P><STRONG><a name="[a6]"></a>get_u32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
</UL>

<P><STRONG><a name="[9b]"></a>init_arp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, at_arp.o(i.init_arp), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_eth_link
</UL>

<P><STRONG><a name="[33]"></a>init_eth_link</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_ethernet.o(i.init_eth_link), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_arp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[35]"></a>init_tcp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_tcp.o(i.init_tcp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[34]"></a>init_udp</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at_udp.o(i.init_udp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_system
</UL>

<P><STRONG><a name="[9c]"></a>ip_chk_frame</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, at_ip.o(i.ip_chk_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ip_chk_frame &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_is_member
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[a0]"></a>ip_get_locadr</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, at_ip.o(i.ip_get_locadr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ip_get_locadr &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[a1]"></a>ip_send_frame</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, at_ip.o(i.ip_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispatch_frame
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_chksum
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[8d]"></a>is_subnet</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, at_lib.o(i.is_subnet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
</UL>

<P><STRONG><a name="[9a]"></a>is_subnet_bcast</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_arp.o(i.is_subnet_bcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = is_subnet_bcast &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
</UL>

<P><STRONG><a name="[6d]"></a>main_TcpNet</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, at_system.o(i.main_TcpNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main_TcpNet &rArr; run_system &rArr; run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>mem_comp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_lib.o(i.mem_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_chk_adr
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
</UL>

<P><STRONG><a name="[90]"></a>mem_copy</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, at_lib.o(i.mem_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_subnet_bcast
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
</UL>

<P><STRONG><a name="[98]"></a>mem_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_lib.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_udp
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_tcp
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_req
</UL>

<P><STRONG><a name="[8e]"></a>mem_test</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at_lib.o(i.mem_test))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eth_send_frame
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
</UL>

<P><STRONG><a name="[a2]"></a>process_arp</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, at_arp.o(i.process_arp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = process_arp &rArr; arp_send_reply &rArr; arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_send_reply
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_get_response
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[a3]"></a>process_icmp</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, at_icmp.o(i.process_icmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = process_icmp &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_eth_link
</UL>

<P><STRONG><a name="[3c]"></a>process_tcp</STRONG> (Thumb, 1132 bytes, Stack size 40 bytes, at_tcp.o(i.process_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_error
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resize_mem
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_opt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_map_socket
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_init_seq
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_tcp
</UL>

<P><STRONG><a name="[3a]"></a>process_udp</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, at_udp.o(i.process_udp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = process_udp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_udp
</UL>

<P><STRONG><a name="[88]"></a>put_in_queue</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_ethernet.o(i.put_in_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = put_in_queue &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>resize_mem</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, at_mem.o(i.resize_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = resize_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_disable_eth
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_enable_eth
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[37]"></a>run_eth_link</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, at_ethernet.o(i.run_eth_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = run_eth_link &rArr; process_hl_tcp &rArr; process_tcp &rArr; tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_tcp
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_udp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_hl_igmp
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_ethernet
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_icmp
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_update
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_test
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[b1]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at_lib.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
</UL>

<P><STRONG><a name="[38]"></a>tcp_poll_sockets</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, at_tcp.o(i.tcp_poll_sockets))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tcp_poll_sockets &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_system
</UL>

<P><STRONG><a name="[6e]"></a>timer_tick</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at_system.o(i.timer_tick))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[74]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[83]"></a>output_MDIO</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, emac_lpc17xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
</UL>

<P><STRONG><a name="[82]"></a>read_PHY</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[85]"></a>write_PHY</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, emac_lpc17xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turnaround_MDIO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_MDIO
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ethernet
</UL>

<P><STRONG><a name="[84]"></a>turnaround_MDIO</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, emac_lpc17xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
</UL>

<P><STRONG><a name="[ac]"></a>tcp_init_seq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at_tcp.o(i.tcp_init_seq))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[a4]"></a>tcp_map_socket</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, at_tcp.o(i.tcp_map_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_map_socket &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[ab]"></a>tcp_process_opt</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, at_tcp.o(i.tcp_process_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_process_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[a9]"></a>tcp_send_ctrl</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_frame
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
</UL>

<P><STRONG><a name="[b0]"></a>tcp_send_frame</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, at_tcp.o(i.tcp_send_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_get_locadr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumVal
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksumBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[aa]"></a>tcp_send_reset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcp_send_reset &rArr; tcp_send_ctrl &rArr; tcp_send_frame &rArr; ip_send_frame &rArr; dispatch_frame &rArr; eth_send_frame &rArr; arp_cache_find &rArr; arp_send_req &rArr; alloc_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwapB
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[a7]"></a>tcp_set_retransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_set_retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_set_retransmit &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_transit
</UL>

<P><STRONG><a name="[ad]"></a>tcp_transit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, at_tcp.o(i.tcp_transit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_transit &rArr; tcp_set_retransmit &rArr; free_mem
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_set_retransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_poll_sockets
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tcp
</UL>

<P><STRONG><a name="[8f]"></a>arp_cache_alloc</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, at_arp.o(i.arp_cache_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = arp_cache_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_find
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
</UL>

<P><STRONG><a name="[94]"></a>arp_get_response</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, at_arp.o(i.arp_get_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arp_get_response &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
</UL>

<P><STRONG><a name="[95]"></a>arp_send_reply</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, at_arp.o(i.arp_send_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = arp_send_reply &rArr; arp_cache_add &rArr; is_subnet &rArr; mem_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arp_cache_add
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_copy
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_mem
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_mem
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_arp
</UL>

<P><STRONG><a name="[9f]"></a>ip_get_chksum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_ip.o(i.ip_get_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ip_get_chksum &rArr; CalcChksum
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcChksum
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chk_frame
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_send_frame
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
